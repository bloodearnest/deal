{'CLASSES': {'sim.deal.common_processes.AcceptProcess': {'bases': ['util.SignalProcess'],
                                                         'constructor': ['agent',
                                                                         'value',
                                                                         'timeout'],
                                                         'docstring': '',
                                                         'methods': [('accept', [], '')],
                                                         'properties': ['agent',
                                                                        'value',
                                                                        'timeout']},
             'sim.deal.common_processes.CancelProcess': {'bases': ['sim.deal.common_processes.Process'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('pem', ['process'], '')],
                                                         'properties': []},
             'sim.deal.common_processes.ConfirmProcess': {'bases': ['util.SignalProcess'],
                                                          'constructor': ['agent', 'value'],
                                                          'docstring': ' This process waits until the job is cancelled or completed',
                                                          'methods': [('confirm', [], '')],
                                                          'properties': ['agent', 'value']},
             'sim.deal.ecomodel.EcoModel': {'bases': ['models.GridModel'],
                                            'constructor': ['mean_degree=8', 'ttl=1', '**kw'],
                                            'docstring': '',
                                            'methods': [('new_buyer', ['job', 'node'], ''),
                                                        ('new_process', [], ''),
                                                        ('start', ['*a', '**kw'], '')],
                                            'properties': ['buyer_ttl', 'topology']},
             'sim.deal.grid.GridResource': {'bases': ['object'],
                                            'constructor': ['node', 'capacity'],
                                            'docstring': '',
                                            'methods': [('can_allocate', ['job'], ''),
                                                        ('start',
                                                         ['job', 'confirm_process'],
                                                         ''),
                                                        ('cancel', ['job'], ''),
                                                        ('remove', ['job'], '')],
                                            'properties': ['node',
                                                           'capacity',
                                                           'jobs',
                                                           'util',
                                                           'used',
                                                           'free',
                                                           'load',
                                                           'utilisation']},
             'sim.deal.grid.Job': {'bases': ['SimPy.Simulation.Process'],
                                   'constructor': ['size', 'duration'],
                                   'docstring': '',
                                   'methods': [('execute', ['resource', 'confirm_process'], '')],
                                   'properties': ['_job_counter',
                                                  'id',
                                                  'size',
                                                  'duration',
                                                  'nodes_visited',
                                                  'quantity']},
             'sim.deal.grid.Server': {'bases': ['object'],
                                      'constructor': ['node', 'service'],
                                      'docstring': '',
                                      'methods': [('__str__', [], '')],
                                      'properties': ['id',
                                                     'service_time',
                                                     'processor',
                                                     'msg_history',
                                                     'mean_queue_wait',
                                                     'mean_utilisation']},
             'sim.deal.market.MarketRules': {'bases': ['object'],
                                             'constructor': [],
                                             'docstring': 'Dumb continer for market rules, like min/max, NYSE, or timeout info',
                                             'methods': [],
                                             'properties': []},
             'sim.deal.market.Quote': {'bases': ['object'],
                                       'constructor': ['bid', 'buyer', 'seller', 'job', 'price'],
                                       'docstring': 'A quote in the market',
                                       'methods': [('__eq__', ['other'], ''),
                                                   ('__str__', [], ''),
                                                   ('str', ['receiver'], '')],
                                       'properties': ['seller',
                                                      'buyer',
                                                      'bid',
                                                      'ask',
                                                      'price',
                                                      'job',
                                                      'quantity',
                                                      'id']},
             'sim.deal.message.Message': {'bases': ['sim.deal.message.Process'],
                                          'constructor': ['**kw'],
                                          'docstring': '',
                                          'methods': [('send_msg', ['*a', '**kw'], ''),
                                                      ('send', ['src', 'dst', '**kw'], ''),
                                                      ('process', ['*a', '**kw'], ''),
                                                      ('clone', [], ''),
                                                      ('__str__', [], '')],
                                          'properties': ['msgid', 'history']},
             'sim.deal.message.MessageWithQuote': {'bases': ['sim.deal.message.Message'],
                                                   'constructor': ['quote', '*a', '**kw'],
                                                   'docstring': '',
                                                   'methods': [('record', ['node'], ''),
                                                               ('check_buyer',
                                                                ['dst', 'trace'],
                                                                '')],
                                                   'properties': ['quote']},
             'sim.deal.model.DummyProcess': {'bases': ['SimPy.Simulation.Process'],
                                             'constructor': [],
                                             'docstring': 'A process that does nothing for one second',
                                             'methods': [('pem', [], '')],
                                             'properties': []},
             'sim.deal.model.Model': {'bases': ['object'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('setup', [], ''),
                                                  ('start', ['*a', '**kw'], ''),
                                                  ('new_process',
                                                   [],
                                                   'Generates new process entering the system'),
                                                  ('run', ['*a', '**kw'], '')],
                                      'properties': []},
             'sim.deal.models.GridModel': {'bases': ['model.Model'],
                                           'constructor': ['size=100',
                                                           'load=1.0',
                                                           'regions=(4, 4)',
                                                           'coords=(100, 100)',
                                                           'run_times=3',
                                                           'arrival_dist=dists.expon',
                                                           'resource_sizes=dists.gamma(100)',
                                                           'job_sizes=dists.gamma(20)',
                                                           'job_durations=dists.gamma(100)',
                                                           'service_means=dists.normal(0.1)',
                                                           'service_dist=dists.gamma',
                                                           'latency_means=dists.normal(0.1)',
                                                           'latency_dist=dists.gamma',
                                                           'global_latency=dists.gamma(0.1)'],
                                           'docstring': 'Basic model of the Grid',
                                           'methods': [('random_node', [], ''),
                                                       ('new_job', [], '')],
                                           'properties': ['runtime',
                                                          'inter_arrival_time',
                                                          'job_sizes',
                                                          'job_durations',
                                                          'size',
                                                          'load',
                                                          'graph',
                                                          'nodes']},
             'sim.deal.network.network.Network': {'bases': ['networkx.XGraph'],
                                                  'constructor': ['coord_space',
                                                                  'regions',
                                                                  'local_latencies',
                                                                  'global_latency',
                                                                  'latency_dist',
                                                                  'distance_weight=0.29999999999999999',
                                                                  'mean_degree=8',
                                                                  '*a',
                                                                  '**kw'],
                                                  'docstring': '',
                                                  'methods': [('latency_function',
                                                               ['node1', 'node2'],
                                                               ''),
                                                              ('make_link',
                                                               ['node', 'other'],
                                                               '')],
                                                  'properties': ['coord_space',
                                                                 'regions',
                                                                 'local_latencies',
                                                                 'latency_dist',
                                                                 'global_latency',
                                                                 'distance_weight',
                                                                 'mean_degree',
                                                                 'max_distance']},
             'sim.deal.network.node.Node': {'bases': ['object'],
                                            'constructor': ['id', 'location', 'region', 'graph'],
                                            'docstring': 'Basic network node.',
                                            'methods': [('generate_latency', ['other'], ''),
                                                        ('confirm_buyer',
                                                         ['buyer', 'trace'],
                                                         ''),
                                                        ('__str__', [], ''),
                                                        ('__lt__', ['other'], ''),
                                                        ('shout_msg',
                                                         ['msg', '*a', '**kw'],
                                                         '')],
                                            'properties': ['id',
                                                           'location',
                                                           'region',
                                                           'graph',
                                                           'neighbors',
                                                           'degree',
                                                           '__repr__']},
             'sim.deal.network.topology.FullyConnectedNode': {'bases': ['StandardError'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': []},
             'sim.deal.rationales.Rationale': {'bases': ['object'],
                                               'constructor': ['buyer', 'limit', 'rules'],
                                               'docstring': '',
                                               'methods': [('observe',
                                                            ['quote', 'success'],
                                                            ''),
                                                           ('quote', ['*a', '**kw'], '')],
                                               'properties': ['buyer',
                                                              'seller',
                                                              'limit',
                                                              'market',
                                                              'seller_range',
                                                              'buyer_range']},
             'sim.deal.rationales.ZIC': {'bases': ['sim.deal.rationales.Rationale'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('quote', ['*a', '**kw'], '')],
                                         'properties': []},
             'sim.deal.rationales.ZIP': {'bases': ['sim.deal.rationales.Rationale'],
                                         'constructor': ['*a', '**kw'],
                                         'docstring': '',
                                         'methods': [('update',
                                                      ['target'],
                                                      'Updates the price using the Widrow-Hoff learning rule'),
                                                     ('observe', ['quote', 'success'], ''),
                                                     ('quote', ['*a', '**kw'], '')],
                                         'properties': ['learning_rate',
                                                        'momentum',
                                                        'coeff',
                                                        'last_change',
                                                        'price',
                                                        'lower_margin',
                                                        'raise_margin']},
             'sim.deal.sealedbid.buyer.SBBuyer': {'bases': ['traders.buyer.Buyer'],
                                                  'constructor': ['id',
                                                                  'rationale',
                                                                  'job',
                                                                  'ttl=2',
                                                                  '**kw'],
                                                  'docstring': '',
                                                  'methods': [('start', [], ''),
                                                              ('advertise', [], ''),
                                                              ('quote_received', ['quote'], ''),
                                                              ('quote_timedout', [], ''),
                                                              ('accept_best_quote', [], ''),
                                                              ('confirm_received',
                                                               ['confirm'],
                                                               ''),
                                                              ('reject_received',
                                                               ['reject'],
                                                               ''),
                                                              ('accept_timedout',
                                                               ['accept'],
                                                               ''),
                                                              ('record_failure', [], ''),
                                                              ('record_success', ['quote'], '')],
                                                  'properties': ['ttl',
                                                                 'timedout',
                                                                 'rejected',
                                                                 'has_timedout',
                                                                 'valid_quotes',
                                                                 'invalid_quotes',
                                                                 'have_received_quote',
                                                                 'current_quote',
                                                                 'accept',
                                                                 'cancel',
                                                                 'complete',
                                                                 'accept_process']},
             'sim.deal.sealedbid.messages.Accept': {'bases': ['message.MessageWithQuote'],
                                                    'constructor': [],
                                                    'docstring': 'Accept sent to seller',
                                                    'methods': [('process',
                                                                 ['src',
                                                                  'dst',
                                                                  'trace',
                                                                  '**kw'],
                                                                 '')],
                                                    'properties': []},
             'sim.deal.sealedbid.messages.Advert': {'bases': ['message.MessageWithQuote'],
                                                    'constructor': [],
                                                    'docstring': 'Advert sent to seller',
                                                    'methods': [('process',
                                                                 ['src',
                                                                  'dst',
                                                                  'trace',
                                                                  '**kw'],
                                                                 '')],
                                                    'properties': []},
             'sim.deal.sealedbid.messages.Cancel': {'bases': ['message.MessageWithQuote'],
                                                    'constructor': [],
                                                    'docstring': 'Cancellation of previous accept message, sent to seller',
                                                    'methods': [('process',
                                                                 ['src',
                                                                  'dst',
                                                                  'trace',
                                                                  '**kw'],
                                                                 '')],
                                                    'properties': []},
             'sim.deal.sealedbid.messages.Confirm': {'bases': ['message.MessageWithQuote'],
                                                     'constructor': [],
                                                     'docstring': 'Confirmation of acceptance, sent to buyer',
                                                     'methods': [('process',
                                                                  ['src',
                                                                   'dst',
                                                                   'trace',
                                                                   '**kw'],
                                                                  '')],
                                                     'properties': []},
             'sim.deal.sealedbid.messages.PrivateQuote': {'bases': ['message.MessageWithQuote'],
                                                          'constructor': [],
                                                          'docstring': 'quote sent to buyer',
                                                          'methods': [('process',
                                                                       ['src',
                                                                        'dst',
                                                                        'trace',
                                                                        '**kw'],
                                                                       '')],
                                                          'properties': []},
             'sim.deal.sealedbid.messages.Reject': {'bases': ['message.MessageWithQuote'],
                                                    'constructor': [],
                                                    'docstring': 'Rejection of acceptance, sent to buyer',
                                                    'methods': [('process',
                                                                 ['src',
                                                                  'dst',
                                                                  'trace',
                                                                  '**kw'],
                                                                 '')],
                                                    'properties': []},
             'sim.deal.sealedbid.model.SBModel': {'bases': ['ecomodel.EcoModel'],
                                                  'constructor': ['**kw'],
                                                  'docstring': '',
                                                  'methods': [('new_buyer',
                                                               ['job', 'node'],
                                                               '')],
                                                  'properties': []},
             'sim.deal.sealedbid.sbmarket.Quote': {'bases': ['object'],
                                                   'constructor': ['bid',
                                                                   'buyer',
                                                                   'seller',
                                                                   'job',
                                                                   'price'],
                                                   'docstring': 'A quote in the market',
                                                   'methods': [('__eq__', ['other'], ''),
                                                               ('__str__', [], ''),
                                                               ('str', ['receiver'], '')],
                                                   'properties': ['seller',
                                                                  'buyer',
                                                                  'bid',
                                                                  'ask',
                                                                  'price',
                                                                  'job',
                                                                  'quantity']},
             'sim.deal.sealedbid.seller.SBSeller': {'bases': ['traders.seller.Seller'],
                                                    'constructor': ['id',
                                                                    'rationale',
                                                                    'node',
                                                                    '**kw'],
                                                    'docstring': '',
                                                    'methods': [('quote_received',
                                                                 ['quote'],
                                                                 ''),
                                                                ('accept_received',
                                                                 ['quote'],
                                                                 ''),
                                                                ('quote_timedout', [], ''),
                                                                ('cancel_received',
                                                                 ['cancel'],
                                                                 ''),
                                                                ('complete_received',
                                                                 ['complete'],
                                                                 '')],
                                                    'properties': ['offers',
                                                                   'cancelled_ids',
                                                                   'price',
                                                                   'confirm',
                                                                   'reject']},
             'sim.deal.stats.dists': {'bases': ['object'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('normal', ['sigma=None'], ''),
                                                  ('normal_int', ['sigma=None'], ''),
                                                  ('expon', [], ''),
                                                  ('gamma', ['shape=2'], ''),
                                                  ('uniform', ['b'], ''),
                                                  ('uniform_int', ['b'], ''),
                                                  ('constant', [], '')],
                                      'properties': []},
             'sim.deal.tests.test_message.TestMessage': {'bases': ['.message.Message'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('process',
                                                                      ['src',
                                                                       'dst',
                                                                       'log',
                                                                       '**kw'],
                                                                      '')],
                                                         'properties': []},
             'sim.deal.tests.test_message.TestServer': {'bases': ['object'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['msg_history',
                                                                       'processor',
                                                                       'service_time']},
             'sim.deal.trace.BaseTracer': {'bases': ['object'],
                                           'constructor': ['messages=None'],
                                           'docstring': '',
                                           'methods': [('add', ['msg'], ''),
                                                       ('__call__', ['msg'], ''),
                                                       ('__nonzero__', [], '')],
                                           'properties': ['messages']},
             'sim.deal.trace.Tracer': {'bases': ['sim.deal.trace.BaseTracer'],
                                       'constructor': ['node', 'messages=None'],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['node_msg']},
             'sim.deal.traders.buyer.Buyer': {'bases': ['trader.Trader'],
                                              'constructor': ['id', 'rationale', 'job', '**kw'],
                                              'docstring': '',
                                              'methods': [('start', [], ''),
                                                          ('start_on_node', ['node'], ''),
                                                          ('cancel_all', [], ''),
                                                          ('remove_from_node', [], ''),
                                                          ('migrate', [], ''),
                                                          ('finish_trading', [], ''),
                                                          ('confirm', ['confirm'], ''),
                                                          ('reject', ['reject'], ''),
                                                          ('cancel', ['cancel'], ''),
                                                          ('complete', ['complete'], ''),
                                                          ('create_quote', [], ''),
                                                          ('create_accept', ['quote'], ''),
                                                          ('viable_quote', ['q'], '')],
                                              'properties': ['job',
                                                             'migrations',
                                                             'listen_process',
                                                             'accepted',
                                                             'accept_process',
                                                             'confirm_process',
                                                             'start_time',
                                                             'node',
                                                             'trace',
                                                             'regions',
                                                             'active',
                                                             'price']},
             'sim.deal.traders.processes.ListenProcess': {'bases': ['sim.deal.traders.processes.SignalProcess'],
                                                          'constructor': ['trader'],
                                                          'docstring': 'This process recieves the quotes coming in from others',
                                                          'methods': [('listen', [], '')],
                                                          'properties': ['trader']},
             'sim.deal.traders.seller.Seller': {'bases': ['trader.Trader'],
                                                'constructor': ['id',
                                                                'rationale',
                                                                'node',
                                                                '**kw'],
                                                'docstring': '',
                                                'methods': [('start', [], ''),
                                                            ('confirm', ['confirm'], ''),
                                                            ('reject', ['reject'], ''),
                                                            ('cancel', ['cancel'], ''),
                                                            ('complete', ['complete'], ''),
                                                            ('create_quote', [], ''),
                                                            ('create_accept', ['quote'], ''),
                                                            ('viable_quote', ['q'], '')],
                                                'properties': ['node',
                                                               'trace',
                                                               'listen_process',
                                                               'accept_processes',
                                                               'confirm_processes',
                                                               'rejected',
                                                               'cancelled',
                                                               'resource',
                                                               'price']},
             'sim.deal.traders.trader.Trader': {'bases': ['object'],
                                                'constructor': ['id', 'rationale', '**kw'],
                                                'docstring': '',
                                                'methods': [('__str__', [], ''),
                                                            ('disable', [], ''),
                                                            ('quote', ['quote'], ''),
                                                            ('accept', ['accept'], ''),
                                                            ('confirm', ['confirm'], ''),
                                                            ('reject', ['reject'], ''),
                                                            ('cancel', ['cancel'], ''),
                                                            ('complete', ['quote'], ''),
                                                            ('quote_received', ['quote'], ''),
                                                            ('accept_received', ['quote'], ''),
                                                            ('quote_timedout', [], ''),
                                                            ('confirm_received',
                                                             ['confirm'],
                                                             ''),
                                                            ('reject_received', ['reject'], ''),
                                                            ('accept_timedout', ['accept'], ''),
                                                            ('cancel_received', ['cancel'], ''),
                                                            ('complete_received',
                                                             ['complete'],
                                                             '')],
                                                'properties': ['id',
                                                               'rationale',
                                                               'active',
                                                               'price',
                                                               'regions',
                                                               'trace',
                                                               'quote_timeout',
                                                               'accept_timeout',
                                                               'limit']},
             'sim.deal.util.JobTracker': {'bases': ['object'],
                                          'constructor': ['name'],
                                          'docstring': '',
                                          'methods': [('record', ['quote'], ''),
                                                      ('report', [], ''),
                                                      ('_report', ['tally'], '')],
                                          'properties': ['name',
                                                         'sizes',
                                                         'limits',
                                                         'degrees',
                                                         'count']},
             'sim.deal.util.RingBuffer': {'bases': ['list'],
                                          'constructor': ['size'],
                                          'docstring': ' class that implements a not-yet-full buffer ',
                                          'methods': [('append',
                                                       ['x'],
                                                       ' append an element at the end of the buffer. ')],
                                          'properties': ['max', 'cur', '__class__', 'add']},
             'sim.deal.util.SignalProcess': {'bases': ['SimPy.Simulation.Process'],
                                             'constructor': ['name=None'],
                                             'docstring': '',
                                             'methods': [('signal', ['name', 'value=None'], ''),
                                                         ('have_signal', ['name'], ''),
                                                         ('get_signal_value', ['name'], '')],
                                             'properties': ['_signals']}},
 'CONSTANTS': ['sim.deal.draw.PRICE',
               'sim.deal.draw.QUANT',
               'sim.deal.message._msg_counter',
               'sim.deal.record.buys',
               'sim.deal.record.buys_theory',
               'sim.deal.record.sells',
               'sim.deal.record.sells_theory',
               'sim.deal.record.trade_times',
               'sim.deal.record.trade_prices',
               'sim.deal.record.buyer_timeouts',
               'sim.deal.record.buyer_util',
               'sim.deal.record.seller_util',
               'sim.deal.record.njobs',
               'sim.deal.record.successes',
               'sim.deal.record.failures',
               'sim.deal.record.failed',
               'sim.deal.record.failure_reasons_record',
               'sim.deal.record.failure_reasons',
               'sim.deal.record.r',
               'sim.deal.record.job_penetration_tally',
               'sim.deal.record.migrations',
               'sim.deal.record.counts',
               'sim.deal.run.models',
               'sim.deal.run.args',
               'sim.deal.run.model',
               'sim.deal.run.output',
               'sim.deal.run.fname',
               'sim.deal.run.arg',
               'sim.deal.run.k',
               'sim.deal.run.v',
               'sim.deal.run.model',
               'sim.deal.run.output',
               'sim.deal.run.fname',
               'sim.deal.run.m',
               'sim.deal.run.r',
               'sim.deal.run.h',
               'sim.deal.trace.enabled',
               'sim.deal.util.sortedtuple',
               'sim.deal.sealedbid.model.slimits',
               'sim.deal.sealedbid.model.blimits',
               'sim.deal.sealedbid.model.rules',
               'sim.deal.sealedbid.model.rationale',
               'sim.deal.tests.test_message.G',
               'sim.deal.tests.test_message.n',
               'sim.deal.tests.test_message.Nodes',
               'sim.deal.tests.test_sb.model',
               'sim.deal.tests.test_traders.j',
               'sim.deal.tests.test_traders.market',
               'sim.deal.scripts.start_workers.machines',
               'sim.deal.scripts.start_workers.sd',
               'sim.deal.scripts.start_workers.cmd',
               'sim.deal.scripts.start_workers.machine',
               'sim.deal.scripts.create_exp.create_dir',
               'sim.deal.scripts.create_exp.loads',
               'sim.deal.scripts.create_exp.i',
               'sim.deal.scripts.create_exp.sizes',
               'sim.deal.scripts.create_exp.degrees',
               'sim.deal.scripts.create_exp.i',
               'sim.deal.scripts.create_exp.reps',
               'sim.deal.scripts.create_exp.extra',
               'sim.deal.scripts.create_exp.name',
               'sim.deal.scripts.create_exp.first',
               'sim.deal.scripts.create_exp.second',
               'sim.deal.scripts.create_exp.root',
               'sim.deal.scripts.create_exp.rundir',
               'sim.deal.scripts.manager.work_dir',
               'sim.deal.scripts.manager.log_dir',
               'sim.deal.scripts.manager.host',
               'sim.deal.scripts.manager.log_file',
               'sim.deal.scripts.manager.f',
               'sim.deal.scripts.manager.args',
               'sim.deal.scripts.manager.retcode',
               'sim.deal.scripts.process_results.results_dir',
               'sim.deal.scripts.process_results.stats',
               'sim.deal.scripts.process_results.shape'],
 'FUNCTIONS': [('sim.deal.draw.smooth', ['x', 'y', 'n'], ''),
               ('sim.deal.draw.pqcurve', ['data'], ''),
               ('sim.deal.draw.supdem', ['buys', 'sells'], ''),
               ('sim.deal.draw.topology', ['g'], ''),
               ('sim.deal.draw.plot_eq', ['buys', 'sells'], ''),
               ('sim.deal.equilibrium.pqcurve_iter', ['buys', 'sells'], ''),
               ('sim.deal.equilibrium.find_equilibrium', ['buys', 'sells'], ''),
               ('sim.deal.market.normalise_price', ['p'], 'normalise to 2dp'),
               ('sim.deal.market.Bid', ['*a', '**kw'], 'Factory for a Bid quote'),
               ('sim.deal.market.Ask', ['*a', '**kw'], 'Factory for an Ask quote'),
               ('sim.deal.record.record_trade', ['quote', 'success=True'], ''),
               ('sim.deal.record.record_failure', ['quote'], ''),
               ('sim.deal.record.record_failure_reason', ['jobid', 'reason'], ''),
               ('sim.deal.record.clean_up_job', ['job'], ''),
               ('sim.deal.record.calc_results', ['model'], ''),
               ('sim.deal.report.printr', ['results'], ''),
               ('sim.deal.report.write', ['results', 'out', 'fname'], ''),
               ('sim.deal.stats.random_other', ['seq', 'this'], ''),
               ('sim.deal.stats.list_mean', ['items', 'getter'], ''),
               ('sim.deal.stats.mean_server_utilisation', ['model'], ''),
               ('sim.deal.stats.mean_queue_time', ['model'], ''),
               ('sim.deal.stats.mean_resource_util', ['model'], ''),
               ('sim.deal.util.reactivate_on_call', ['func'], ''),
               ('sim.deal.common_processes.cancel_process', ['process'], ''),
               ('sim.deal.sealedbid.sbmarket.Bid', ['*a', '**kw'], 'Factory for a Bid quote'),
               ('sim.deal.sealedbid.sbmarket.Ask', ['*a', '**kw'], 'Factory for an Ask quote'),
               ('sim.deal.tests.test_message.test_message', [], ''),
               ('sim.deal.tests.test_sb.test_model', [], ''),
               ('sim.deal.tests.test_traders.test_zip_buyer_better_bid_failure', [], ''),
               ('sim.deal.tests.test_traders.test_zip_buyer_worse_bid_failure', [], ''),
               ('sim.deal.tests.test_traders.test_zip_buyer_better_bid_succeed', [], ''),
               ('sim.deal.tests.test_traders.test_zip_buyer_worse_bid_succeed', [], ''),
               ('sim.deal.tests.test_traders.test_zip_buyer_better_ask_failure', [], ''),
               ('sim.deal.tests.test_traders.test_zip_buyer_worse_ask_failure', [], ''),
               ('sim.deal.tests.test_traders.test_zip_buyer_better_ask_succeed', [], ''),
               ('sim.deal.tests.test_traders.test_zip_buyer_worse_ask_succeed', [], ''),
               ('sim.deal.tests.test_traders.test_zip_seller_better_bid_failure', [], ''),
               ('sim.deal.tests.test_traders.test_zip_seller_worse_bid_failure', [], ''),
               ('sim.deal.tests.test_traders.test_zip_seller_better_bid_succeed', [], ''),
               ('sim.deal.tests.test_traders.test_zip_seller_worse_bid_succeed', [], ''),
               ('sim.deal.tests.test_traders.test_zip_seller_better_ask_failure', [], ''),
               ('sim.deal.tests.test_traders.test_zip_seller_worse_ask_failure', [], ''),
               ('sim.deal.tests.test_traders.test_zip_seller_better_ask_succeed', [], ''),
               ('sim.deal.tests.test_traders.test_zip_seller_worse_ask_succeed', [], ''),
               ('sim.deal.network.network.generate_nodes', ['G', 'n'], ''),
               ('sim.deal.network.network.generate_location', ['regions', 'cspace'], ''),
               ('sim.deal.network.network.wrapped_distance', ['a', 'b', 'maxv'], ''),
               ('sim.deal.network.topology.valid_node_choices', ['G', 'node'], ''),
               ('sim.deal.network.topology.generative_link',
                ['G', 'node', 'p_local', 'p_pref', 'p_social'],
                ''),
               ('sim.deal.network.topology.roulette_select', ['nds'], ''),
               ('sim.deal.network.topology.generative_topology',
                ['G', 'p_local=0.0', 'p_pref=0.0', 'p_social=0.5'],
                ''),
               ('sim.deal.scripts.start_workers.isup', ['host'], ''),
               ('sim.deal.scripts.start_workers.launch', ['host', 'cmd'], ''),
               ('sim.deal.scripts.start_workers.init', [], ''),
               ('sim.deal.scripts.create_exp.build_workdir',
                ['work_dir', 'rundir', 'xs', 'xname', 'ys', 'yname', "extra=''", 'reps=10'],
                ''),
               ('sim.deal.scripts.process_results.all_equal', ['i'], ''),
               ('sim.deal.scripts.process_results.my_mean', ['a'], ''),
               ('sim.deal.scripts.process_results.process_runs', ['dir'], ''),
               ('sim.deal.scripts.process_results.process_stats', ['dir'], ''),
               ('sim.deal.scripts.process_results.plot_2d',
                ['stats', 'shape', 'x', 'y', 'z', 'name'],
                ''),
               ('sim.deal.scripts.util.filelock',
                ['path', "mode='a+'", 'type=fcntl.LOCK_EX', 'block=False'],
                ''),
               ('sim.deal.scripts.util.host_is_up', ['host'], ''),
               ('sim.deal.scripts.util.run_on_host', ['host', 'cmd'], ''),
               ('sim.deal.scripts.util.get_next_job', ['dir'], '')],
 'POINTERS': {'sim.deal.common_processes.*': 'SimPy.Simulation.*',
              'sim.deal.common_processes.SignalProcess': 'util.SignalProcess',
              'sim.deal.draw.dists': 'stats.dists',
              'sim.deal.draw.equilibrium': 'equilibrium',
              'sim.deal.draw.izip': 'itertools.izip',
              'sim.deal.draw.networkx': 'networkx',
              'sim.deal.draw.pylab': 'pylab',
              'sim.deal.ecomodel.GridModel': 'models.GridModel',
              'sim.deal.ecomodel.GridResource': 'grid.GridResource',
              'sim.deal.ecomodel.Job': 'grid.Job',
              'sim.deal.ecomodel.Server': 'grid.Server',
              'sim.deal.ecomodel.dists': 'stats.dists',
              'sim.deal.ecomodel.network': 'network',
              'sim.deal.ecomodel.record': 'record',
              'sim.deal.grid.Process': 'SimPy.Simulation.Process',
              'sim.deal.grid.Resource': 'SimPy.Simulation.Resource',
              'sim.deal.grid.RingBuffer': 'util.RingBuffer',
              'sim.deal.grid.Tally': 'SimPy.Simulation.Tally',
              'sim.deal.grid.choice': 'random.choice',
              'sim.deal.grid.hold': 'SimPy.Simulation.hold',
              'sim.deal.grid.itertools': 'itertools',
              'sim.deal.market.math': 'math',
              'sim.deal.market.random': 'random',
              'sim.deal.message.*': 'SimPy.Simulation.*',
              'sim.deal.message.Tracer': 'trace.Tracer',
              'sim.deal.message.copy': 'copy',
              'sim.deal.message.itertools': 'itertools',
              'sim.deal.model.Process': 'SimPy.Simulation.Process',
              'sim.deal.model.datetime': 'datetime.datetime',
              'sim.deal.model.hold': 'SimPy.Simulation.hold',
              'sim.deal.model.hpy': 'guppy.hpy',
              'sim.deal.model.initialize': 'SimPy.Simulation.initialize',
              'sim.deal.model.random': 'random',
              'sim.deal.model.simulate': 'SimPy.Simulation.simulate',
              'sim.deal.model.timedelta': 'datetime.timedelta',
              'sim.deal.models.GridResource': 'grid.GridResource',
              'sim.deal.models.Job': 'grid.Job',
              'sim.deal.models.Model': 'model.Model',
              'sim.deal.models.Server': 'grid.Server',
              'sim.deal.models.dists': 'stats.dists',
              'sim.deal.models.network': 'network',
              'sim.deal.models.random': 'random',
              'sim.deal.models.record': 'record',
              'sim.deal.network.*': 'topology.*',
              'sim.deal.network.network.Node': 'node.Node',
              'sim.deal.network.network.XGraph': 'networkx.XGraph',
              'sim.deal.network.network.math': 'math',
              'sim.deal.network.network.random': 'random',
              'sim.deal.network.node.Graph': 'networkx.Graph',
              'sim.deal.network.node.Tracer': 'trace.Tracer',
              'sim.deal.network.node.XGraph': 'networkx.XGraph',
              'sim.deal.network.node.chain': 'itertools.chain',
              'sim.deal.network.node.connected_components': 'networkx.connected_components',
              'sim.deal.network.node.copy': 'copy',
              'sim.deal.network.node.generators': 'networkx.generators',
              'sim.deal.network.node.izip': 'itertools.izip',
              'sim.deal.network.node.math': 'math',
              'sim.deal.network.node.networkx': 'networkx',
              'sim.deal.network.node.random': 'random',
              'sim.deal.network.topology.chain': 'itertools.chain',
              'sim.deal.network.topology.math': 'math',
              'sim.deal.network.topology.random': 'random',
              'sim.deal.rationales.normalise_price': 'market.normalise_price',
              'sim.deal.rationales.random': 'random',
              'sim.deal.record.JobTracker': 'util.JobTracker',
              'sim.deal.record.Monitor': 'SimPy.Simulation.Monitor',
              'sim.deal.record.OrderedDict': 'odict.OrderedDict',
              'sim.deal.record.Tally': 'SimPy.Simulation.Tally',
              'sim.deal.record.defaultdict': 'collections.defaultdict',
              'sim.deal.record.equilibrium': 'equilibrium',
              'sim.deal.record.math': 'math',
              'sim.deal.record.networkx': 'networkx',
              'sim.deal.record.now': 'SimPy.Simulation.now',
              'sim.deal.record.numpy': 'numpy',
              'sim.deal.record.scipy': 'scipy.stats',
              'sim.deal.record.stats': 'stats',
              'sim.deal.report.equilibrium': 'equilibrium',
              'sim.deal.report.fcntl': 'fcntl',
              'sim.deal.report.filelock': 'scripts.util.filelock',
              'sim.deal.report.path': 'path',
              'sim.deal.report.plot_eq': 'draw.plot_eq',
              'sim.deal.report.pylab': 'pylab',
              'sim.deal.report.record': 'record',
              'sim.deal.report.stats': 'stats',
              'sim.deal.report.with_statement': '__future__.with_statement',
              'sim.deal.run.SBModel': 'sealedbid.model.SBModel',
              'sim.deal.run.dists': 'stats.dists',
              'sim.deal.run.hpy': 'guppy.hpy',
              'sim.deal.run.path': 'path.path',
              'sim.deal.run.record': 'record',
              'sim.deal.run.report': 'report',
              'sim.deal.run.sys': 'sys',
              'sim.deal.run.trace': 'trace',
              'sim.deal.scripts.create_exp.os': 'os',
              'sim.deal.scripts.create_exp.os.path': 'os.path',
              'sim.deal.scripts.create_exp.path': 'path.path',
              'sim.deal.scripts.manager.os': 'os',
              'sim.deal.scripts.manager.path': 'path.path',
              'sim.deal.scripts.manager.sys': 'sys',
              'sim.deal.scripts.manager.util': 'util',
              'sim.deal.scripts.process_results.*': 'pylab.*',
              'sim.deal.scripts.process_results.p3': 'matplotlib.axes3d',
              'sim.deal.scripts.process_results.path': 'path.path',
              'sim.deal.scripts.process_results.pprint': 'pprint.pprint',
              'sim.deal.scripts.process_results.sys': 'sys',
              'sim.deal.scripts.start_workers.cycle': 'itertools.cycle',
              'sim.deal.scripts.start_workers.fcntl': 'fcntl',
              'sim.deal.scripts.start_workers.izip': 'itertools.izip',
              'sim.deal.scripts.start_workers.os': 'os',
              'sim.deal.scripts.start_workers.os.path': 'os.path',
              'sim.deal.scripts.start_workers.path': 'path.path',
              'sim.deal.scripts.start_workers.random': 'random',
              'sim.deal.scripts.start_workers.shutil': 'shutil',
              'sim.deal.scripts.start_workers.sys': 'sys',
              'sim.deal.scripts.start_workers.time': 'time',
              'sim.deal.scripts.util.contextmanager': 'contextlib.contextmanager',
              'sim.deal.scripts.util.fcntl': 'fcntl',
              'sim.deal.scripts.util.os': 'os',
              'sim.deal.scripts.util.path': 'path.path',
              'sim.deal.scripts.util.time': 'time',
              'sim.deal.scripts.util.with_statement': '__future__.with_statement',
              'sim.deal.sealedbid.buyer.*': 'traders.processes.*',
              'sim.deal.sealedbid.buyer.Bid': 'market.Bid',
              'sim.deal.sealedbid.buyer.Buyer': 'traders.buyer.Buyer',
              'sim.deal.sealedbid.buyer.Process': 'SimPy.Simulation.Process',
              'sim.deal.sealedbid.buyer.Tracer': 'trace.Tracer',
              'sim.deal.sealedbid.buyer.activate': 'SimPy.Simulation.activate',
              'sim.deal.sealedbid.buyer.hold': 'SimPy.Simulation.hold',
              'sim.deal.sealedbid.buyer.now': 'SimPy.Simulation.now',
              'sim.deal.sealedbid.buyer.reactivate': 'SimPy.Simulation.reactivate',
              'sim.deal.sealedbid.buyer.record': 'record',
              'sim.deal.sealedbid.messages.MessageWithQuote': 'message.MessageWithQuote',
              'sim.deal.sealedbid.messages.reactivate': 'SimPy.Simulation.reactivate',
              'sim.deal.sealedbid.messages.record': 'record',
              'sim.deal.sealedbid.model.EcoModel': 'ecomodel.EcoModel',
              'sim.deal.sealedbid.model.MarketRules': 'market.MarketRules',
              'sim.deal.sealedbid.model.SBBuyer': 'buyer.SBBuyer',
              'sim.deal.sealedbid.model.SBSeller': 'seller.SBSeller',
              'sim.deal.sealedbid.model.ZIC': 'rationales.ZIC',
              'sim.deal.sealedbid.model.ZIP': 'rationales.ZIP',
              'sim.deal.sealedbid.model.dists': 'stats.dists',
              'sim.deal.sealedbid.model.random': 'random',
              'sim.deal.sealedbid.sbmarket.*': 'market.*',
              'sim.deal.sealedbid.sbmarket.Process': 'SimPy.Simulation.Process',
              'sim.deal.sealedbid.sbmarket.math': 'math',
              'sim.deal.sealedbid.seller.*': 'messages.*',
              'sim.deal.sealedbid.seller.Ask': 'market.Ask',
              'sim.deal.sealedbid.seller.Process': 'SimPy.Simulation.Process',
              'sim.deal.sealedbid.seller.RingBuffer': 'util.RingBuffer',
              'sim.deal.sealedbid.seller.Seller': 'traders.seller.Seller',
              'sim.deal.sealedbid.seller.Tracer': 'trace.Tracer',
              'sim.deal.sealedbid.seller.activate': 'SimPy.Simulation.activate',
              'sim.deal.sealedbid.seller.hold': 'SimPy.Simulation.hold',
              'sim.deal.sealedbid.seller.now': 'SimPy.Simulation.now',
              'sim.deal.sealedbid.seller.passivate': 'SimPy.Simulation.passivate',
              'sim.deal.sealedbid.seller.reactivate': 'SimPy.Simulation.reactivate',
              'sim.deal.sealedbid.seller.reactivate_on_call': 'util.reactivate_on_call',
              'sim.deal.sealedbid.seller.record': 'record',
              'sim.deal.stats.*': 'random.*',
              'sim.deal.tests.test_message.*': 'SimPy.Simulation.*',
              'sim.deal.tests.test_message.StringIO': 'cStringIO.StringIO',
              'sim.deal.tests.test_message.dists': 'stats.dists',
              'sim.deal.tests.test_message.message': '.message',
              'sim.deal.tests.test_message.networks': '.networks',
              'sim.deal.tests.test_sb.GridModel': 'models.GridModel',
              'sim.deal.tests.test_sb.Topologies': 'networks.Topologies',
              'sim.deal.tests.test_sb.dists': 'stats.dists',
              'sim.deal.tests.test_sb.market': '.market',
              'sim.deal.tests.test_sb.sealedbid': '.sealedbid',
              'sim.deal.tests.test_traders.Ask': 'market.Ask',
              'sim.deal.tests.test_traders.Bid': 'market.Bid',
              'sim.deal.tests.test_traders.Buyer': 'market.Buyer',
              'sim.deal.tests.test_traders.Job': 'grid.Job',
              'sim.deal.tests.test_traders.MarketRules': 'market.MarketRules',
              'sim.deal.tests.test_traders.Seller': 'market.Seller',
              'sim.deal.tests.test_traders.ZIP': 'traders.ZIP',
              'sim.deal.trace.now': 'SimPy.Simulation.now',
              'sim.deal.traders.buyer.*': 'processes.*',
              'sim.deal.traders.buyer.Tracer': 'trace.Tracer',
              'sim.deal.traders.buyer.Trader': 'trader.Trader',
              'sim.deal.traders.buyer.activate': 'SimPy.Simulation.activate',
              'sim.deal.traders.buyer.now': 'SimPy.Simulation.now',
              'sim.deal.traders.processes.*': 'common_processes.*',
              'sim.deal.traders.seller.*': 'processes.*',
              'sim.deal.traders.seller.Tracer': 'trace.Tracer',
              'sim.deal.traders.seller.Trader': 'trader.Trader',
              'sim.deal.traders.seller.now': 'SimPy.Simulation.now',
              'sim.deal.traders.trader.BaseTracer': 'trace.BaseTracer',
              'sim.deal.util.Monitor': 'SimPy.Simulation.Monitor',
              'sim.deal.util.Process': 'SimPy.Simulation.Process',
              'sim.deal.util.Tally': 'SimPy.Simulation.Tally',
              'sim.deal.util.math': 'math',
              'sim.deal.util.reactivate': 'SimPy.Simulation.reactivate'}}
